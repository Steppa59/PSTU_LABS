top = NULL;
return t;
}
else { // если больше 1
Stack* t = p->prev;       // Указатель на второй элемент
int u = p->data;         // Сохранение значения последнего элемента 
top = t;                  // И он теперь первый элемент
delete p;                 // Удаление последнего элемента
return u;                 // Возвращение первого элемента
}
}

Stack* push(Stack*& top, int val) { // Функция добавления элемента в стек
Stack* p = new Stack;        // Выделение памяти для нового элемента
p->data = val;               // Присваивание нового элемента
p->prev = top;               // Новый элемент указывает на нижний элемент 
top = p;                     // Новый элемент стаёт первым элементом стека 
return top;
}

int main() {
setlocale(LC_ALL, "Rus");
cout << "Введите количество элементов: ";
int n;
cin >> n;
cout << "Введите элементы стека: ";
Stack* st = make_stack(n);    // Создание стека
cout << "Стек: ";
print_stack(st);              // Печать стека





int k;
k = 0;
Stack* st2 = make_stack(0);   // Создание стека (пустого)
for (int i = 0; i < n; i++) { //перенос всех элементов кроме эл. с ключом F во 2 стек
int t = pop(st);
if (t!=F) {
push(st2, t);
}
else {
k = k + 1;
}
}
n = n - k;
for (int i = 0; i < n; i++) { //перенос всех элементов в начальный стек
int t = pop(st2);
push(st, t);
}
cout << "Стек после удаления первого четного числа: ";
print_stack(st);
    return 0;
}
